@model PaginatedList<StudyPlatformELearningHub.Models.EmailMessage>
@using StudyPlatformELearningHub.Pagination
@{
    ViewData["Title"] = "Email Messages";
    var nameSortParm = ViewData["NameSortParm"]?.ToString();
    var emailSortParm = ViewData["EmailSortParm"]?.ToString();
    var phoneSortParm = ViewData["PhoneSortParm"]?.ToString();
    var subjectSortParm = ViewData["SubjectSortParm"]?.ToString();
    var messageSortParm = ViewData["MessageSortParm"]?.ToString();
    var sentTimeSortParm = ViewData["SentTimeSortParm"]?.ToString();
    var statusSortParm = ViewData["StatusSortParm"]?.ToString();
}
<style>
    .message {
        max-height: 100px; 
        overflow: hidden;
        position: relative;
    }

        .message.expanded {
            max-height: none; 
        }

    .expand-button {
        cursor: pointer;
        color: #007bff; 
    }

    td.status-cell {
        width: 120px; 
    }

    table td {
        padding: 15px; 
    }

    table {
        font-size: 18px; 
    }
    table#emailMessagesTable {
    table-layout: fixed; 
    width: 100%; 
}

thead th {
    width: auto; 
}

td {
    word-wrap: break-word; 
    padding: 10px; 
}
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var statusFilter = document.getElementById("statusFilter");
        var selectedStatus = "@ViewData["StatusFilter"]?.ToString()";

        if (selectedStatus) {
            statusFilter.value = selectedStatus;
        }
    });
</script>
<div class="container mt-4">
    <h2 class="display-4">@ViewData["Title"]</h2>
    <a asp-action="ArchivedEmailList" class="btn btn-secondary mb-3">Archived</a>

    <div class="table-responsive">
        <table id="emailMessagesTable" class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = nameSortParm })">Name</a></th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = emailSortParm })">Email</a></th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = phoneSortParm })">Phone Number</a></th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = subjectSortParm })">Subject</a></th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = messageSortParm })">Message</a></th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = sentTimeSortParm })">Sent Time</a></th>
                    <th>Attachment</th>
                    <th><a href="@Url.Action("EmailList", new { sortOrder = statusSortParm })">Status</a></th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var message in Model)
                {
                    <tr class="@GetStatusClass(message.Status)">
                        <td>@message.Name</td>
                        <td><a href="mailto:@message.Email">@message.Email</a></td>
                        <td><a href="tel:@message.PhoneNumber">@message.PhoneNumber</a></td>
                        <td>@message.Subject</td>
                        <td>
                            <div class="message" id="message-@message.Id">
                                @if (message.Message.Length > 10)
                                {
                                    <span>@message.Message.Substring(0, 10)</span>
                                    <a class="expand-button" href="@Url.Action("ViewFullMessage", new { messageId = message.Id })">Read More</a>
                                }
                                else
                                {
                                    @message.Message
                                }
                            </div>
                        </td>

                        <td>@message.SentTime.ToString("g")</td>
                        <td>
                            @if (message.AttachmentData != null && message.AttachmentData.Length > 0)
                            {
                                <a asp-action="DownloadAttachment" asp-route-id="@message.Id" class="btn btn-success btn-sm">
                                    <i class="fas fa-download"></i> Download
                                </a>
                            }
                            else
                            {
                                <span class="badge badge-secondary">No Attachment</span>
                            }
                        </td>
                        <td class="status-cell">
                            <form asp-action="ChangeStatus" method="post">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="Id" value="@message.Id" />
                                <select name="NewStatus" class="form-control" onchange="this.form.submit()">
                                    @foreach (var status in Enum.GetValues(typeof(StudyPlatformELearningHub.Models.EmailStatus)))
                                    {
                                        bool isSelected = message.Status.Equals((StudyPlatformELearningHub.Models.EmailStatus)status);
                                        <option value="@status" selected="@isSelected">@status</option>
                                    }
                                </select>
                            </form>
                        </td>
                        <td>
                            <!-- Archive/Restore Form -->
                            @if (!message.IsArchived)
                            {
                                <form asp-action="Archive" method="post">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="Id" value="@message.Id" />
                                    <button type="submit" class="btn btn-warning btn-sm">Archive</button>
                                </form>
                            }
                            else
                            {
                                <form asp-action="Restore" method="post" class="d-inline-block">
                                    <input type="hidden" name="Id" value="@message.Id" />
                                    <button type="submit" class="btn btn-info btn-sm">
                                        <i class="fas fa-box-open"></i> Restore
                                    </button>
                                </form>
                            }
                            <form asp-action="Delete" method="post" onsubmit="return confirm('Are you sure you want to delete this message?');">
                                <input type="hidden" name="Id" value="@message.Id" />
                                <button type="submit" class="btn btn-danger btn-sm">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("EmailList", new { pageIndex = Model.PageIndex - 1 })">&laquo; Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" href="@Url.Action("EmailList", new { pageIndex = i })">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" href="@Url.Action("EmailList", new { pageIndex = Model.PageIndex + 1 })">Next &raquo;</a>
            </li>
        </ul>
    </nav>
</div>
@functions {
    private string GetStatusClass(StudyPlatformELearningHub.Models.EmailStatus status)
    {
        switch (status)
        {
            case StudyPlatformELearningHub.Models.EmailStatus.New:
                return "status-new"; // Green color
            case StudyPlatformELearningHub.Models.EmailStatus.WorkInProgress:
                return "status-work-in-progress"; // Yellow color
            case StudyPlatformELearningHub.Models.EmailStatus.NeedMoreDetail:
                return "status-need-more-detail"; // Red color
            case StudyPlatformELearningHub.Models.EmailStatus.Done:
                return "status-done"; // Grey color
            default:
                return "";
        }
    }
}





